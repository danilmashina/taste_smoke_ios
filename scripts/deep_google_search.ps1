# Deep search for all Google Sign-In references in Flutter project

Write-Host "Deep search for Google Sign-In references..." -ForegroundColor Cyan

$searchPatterns = @(
    "google_sign_in",
    "GoogleSignIn", 
    "GoogleSignInPlugin",
    "REVERSED_CLIENT_ID",
    "com.googleusercontent.apps",
    "GoogleService-Info",
    "google-services",
    "gmsauth",
    "googlesignin"
)

$filesToCheck = @(
    "*.dart",
    "*.swift", 
    "*.m",
    "*.h",
    "*.plist",
    "*.json",
    "*.yaml",
    "*.yml",
    "*.gradle",
    "*.kt",
    "*.xml"
)

$foldersToCheck = @(
    "lib",
    "ios", 
    "android",
    "test",
    "integration_test",
    ".dart_tool",
    "build"
)

Write-Host "Searching in source code..." -ForegroundColor Yellow

foreach ($folder in $foldersToCheck) {
    if (Test-Path $folder) {
        Write-Host "  Checking folder: $folder" -ForegroundColor Gray
        
        foreach ($pattern in $searchPatterns) {
            foreach ($fileType in $filesToCheck) {
                try {
                    $files = Get-ChildItem -Path $folder -Filter $fileType -Recurse -ErrorAction SilentlyContinue
                    
                    foreach ($file in $files) {
                        try {
                            $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
                            if ($content -and $content -match $pattern) {
                                Write-Host "    ERROR: Found '$pattern' in: $($file.FullName)" -ForegroundColor Red
                            }
                        }
                        catch {
                            # Ignore file read errors
                        }
                    }
                }
                catch {
                    # Ignore folder access errors
                }
            }
        }
    }
}

Write-Host ""
Write-Host "Checking iOS-specific files..." -ForegroundColor Yellow

# Check Runner.xcworkspace
if (Test-Path "ios/Runner.xcworkspace") {
    Write-Host "  Checking Runner.xcworkspace..." -ForegroundColor Gray
    try {
        $workspaceFiles = Get-ChildItem -Path "ios/Runner.xcworkspace" -Recurse -ErrorAction SilentlyContinue
        foreach ($file in $workspaceFiles) {
            foreach ($pattern in $searchPatterns) {
                try {
                    $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
                    if ($content -and $content -match $pattern) {
                        Write-Host "    ERROR: Found '$pattern' in workspace: $($file.FullName)" -ForegroundColor Red
                    }
                }
                catch {
                    # Ignore errors
                }
            }
        }
    }
    catch {
        Write-Host "    Warning: Could not access workspace files" -ForegroundColor Yellow
    }
}

# Check project.pbxproj
if (Test-Path "ios/Runner.xcodeproj/project.pbxproj") {
    Write-Host "  Checking project.pbxproj..." -ForegroundColor Gray
    try {
        $pbxContent = Get-Content "ios/Runner.xcodeproj/project.pbxproj" -Raw -ErrorAction SilentlyContinue
        foreach ($pattern in $searchPatterns) {
            if ($pbxContent -and $pbxContent -match $pattern) {
                Write-Host "    ERROR: Found '$pattern' in project.pbxproj" -ForegroundColor Red
            }
        }
    }
    catch {
        Write-Host "    Warning: Could not read project.pbxproj" -ForegroundColor Yellow
    }
}

# Check Generated.xcconfig
if (Test-Path "ios/Flutter/Generated.xcconfig") {
    Write-Host "  Checking Generated.xcconfig..." -ForegroundColor Gray
    try {
        $xcconfigContent = Get-Content "ios/Flutter/Generated.xcconfig" -Raw -ErrorAction SilentlyContinue
        foreach ($pattern in $searchPatterns) {
            if ($xcconfigContent -and $xcconfigContent -match $pattern) {
                Write-Host "    ERROR: Found '$pattern' in Generated.xcconfig" -ForegroundColor Red
            }
        }
    }
    catch {
        Write-Host "    Warning: Could not read Generated.xcconfig" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "Checking autogenerated plugin files..." -ForegroundColor Yellow

# Check GeneratedPluginRegistrant
$pluginFiles = @(
    "ios/Runner/GeneratedPluginRegistrant.m",
    "ios/Runner/GeneratedPluginRegistrant.h", 
    "ios/Flutter/Generated.xcconfig",
    "ios/Flutter/flutter_export_environment.sh"
)

foreach ($file in $pluginFiles) {
    if (Test-Path $file) {
        Write-Host "  Checking $file..." -ForegroundColor Gray
        try {
            $content = Get-Content $file -Raw -ErrorAction SilentlyContinue
            foreach ($pattern in $searchPatterns) {
                if ($content -and $content -match $pattern) {
                    Write-Host "    ERROR: Found '$pattern' in: $file" -ForegroundColor Red
                }
            }
        }
        catch {
            Write-Host "    Warning: Could not read $file" -ForegroundColor Yellow
        }
    }
}

Write-Host ""
Write-Host "Checking build files..." -ForegroundColor Yellow

if (Test-Path "pubspec.lock") {
    Write-Host "  Checking pubspec.lock..." -ForegroundColor Gray
    try {
        $lockContent = Get-Content "pubspec.lock" -Raw -ErrorAction SilentlyContinue
        if ($lockContent -and $lockContent -match "google_sign_in") {
            Write-Host "    ERROR: Found 'google_sign_in' in pubspec.lock" -ForegroundColor Red
            Write-Host "    RECOMMENDATION: Delete pubspec.lock and run flutter pub get" -ForegroundColor Blue
        }
    }
    catch {
        Write-Host "    Warning: Could not read pubspec.lock" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "Deep search completed!" -ForegroundColor Green