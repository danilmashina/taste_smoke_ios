# PowerShell script for checking dependencies and finding remaining google_sign_in references

Write-Host "Checking taste_smoke_ios dependencies..." -ForegroundColor Cyan

# Check pubspec.yaml
Write-Host "Checking pubspec.yaml..." -ForegroundColor Yellow
$pubspecContent = Get-Content "pubspec.yaml" -Raw
if ($pubspecContent -match "^\s*google_sign_in:") {
    Write-Host "ERROR: Found active google_sign_in dependency in pubspec.yaml" -ForegroundColor Red
    exit 1
} else {
    Write-Host "OK: google_sign_in is properly commented out in pubspec.yaml" -ForegroundColor Green
}

# Check imports in Dart code
Write-Host "Checking imports in Dart code..." -ForegroundColor Yellow
$dartFiles = Get-ChildItem -Path "lib" -Filter "*.dart" -Recurse
$foundGoogleImports = @()

foreach ($file in $dartFiles) {
    $content = Get-Content $file.FullName -Raw
    if ($content -match "import.*google_sign_in") {
        $foundGoogleImports += $file.FullName
    }
}

if ($foundGoogleImports.Count -gt 0) {
    Write-Host "ERROR: Found direct google_sign_in imports:" -ForegroundColor Red
    $foundGoogleImports | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
    exit 1
} else {
    Write-Host "OK: No direct google_sign_in imports found" -ForegroundColor Green
}

# Check autogenerated files
Write-Host "Checking autogenerated files..." -ForegroundColor Yellow
if (Test-Path ".dart_tool") {
    $autogenFiles = Get-ChildItem -Path ".dart_tool" -Filter "*.dart" -Recurse
    $foundAutogenGoogle = @()
    
    foreach ($file in $autogenFiles) {
        try {
            $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
            if ($content -and $content -match "google_sign_in") {
                $foundAutogenGoogle += $file.FullName
            }
        } catch {
            # Ignore errors reading files
        }
    }
    
    if ($foundAutogenGoogle.Count -gt 0) {
        Write-Host "WARNING: Found google_sign_in references in autogenerated files" -ForegroundColor Yellow
        Write-Host "RECOMMENDATION: Run flutter clean" -ForegroundColor Blue
    } else {
        Write-Host "OK: Autogenerated files are clean" -ForegroundColor Green
    }
}

# Check iOS configuration
Write-Host "Checking iOS configuration..." -ForegroundColor Yellow
if (Test-Path "ios\Podfile") {
    $podfileContent = Get-Content "ios\Podfile" -Raw
    if ($podfileContent -match "google_sign_in") {
        Write-Host "ERROR: Found google_sign_in references in Podfile" -ForegroundColor Red
        exit 1
    } else {
        Write-Host "OK: Podfile is clean from google_sign_in" -ForegroundColor Green
    }
}

# Check Info.plist
if (Test-Path "ios\Runner\Info.plist") {
    $infoPlistContent = Get-Content "ios\Runner\Info.plist" -Raw
    if ($infoPlistContent -match "REVERSED_CLIENT_ID|google") {
        Write-Host "WARNING: Found possible Google references in Info.plist" -ForegroundColor Yellow
        Write-Host "RECOMMENDATION: Check URL schemes and remove Google-specific settings" -ForegroundColor Blue
    } else {
        Write-Host "OK: Info.plist is clean from Google settings" -ForegroundColor Green
    }
}

Write-Host ""
Write-Host "Check completed! Project is ready to build without google_sign_in" -ForegroundColor Green
Write-Host "You can run: flutter build ios --no-codesign" -ForegroundColor Cyan