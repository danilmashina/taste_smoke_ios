# Nuclear clean for iOS exit code 65 issues
# This script performs the most aggressive cleanup possible

Write-Host "üö® NUCLEAR CLEAN for iOS exit code 65 issues" -ForegroundColor Red
Write-Host "This will delete ALL build artifacts and caches" -ForegroundColor Yellow
Write-Host ""

# Step 1: Flutter complete cleanup
Write-Host "1. üßπ Flutter complete cleanup..." -ForegroundColor Cyan

# Clean Flutter
Write-Host "  Cleaning Flutter..." -ForegroundColor Gray
flutter clean
if ($LASTEXITCODE -ne 0) {
    Write-Host "  ‚ùå Flutter clean failed" -ForegroundColor Red
} else {
    Write-Host "  ‚úÖ Flutter clean completed" -ForegroundColor Green
}

# Clean pub cache
Write-Host "  Cleaning pub cache..." -ForegroundColor Gray
flutter pub cache clean --force 2>$null
Write-Host "  ‚úÖ Pub cache cleaned" -ForegroundColor Green

# Step 2: Delete all autogenerated files
Write-Host ""
Write-Host "2. üóëÔ∏è Deleting autogenerated files..." -ForegroundColor Cyan

$filesToDelete = @(
    "pubspec.lock",
    ".flutter-plugins",
    ".flutter-plugins-dependencies", 
    ".packages"
)

$foldersToDelete = @(
    ".dart_tool",
    "build",
    ".pub-cache"
)

foreach ($file in $filesToDelete) {
    if (Test-Path $file) {
        Remove-Item $file -Force -ErrorAction SilentlyContinue
        Write-Host "  ‚úÖ Deleted: $file" -ForegroundColor Green
    }
}

foreach ($folder in $foldersToDelete) {
    if (Test-Path $folder) {
        Remove-Item $folder -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "  ‚úÖ Deleted folder: $folder" -ForegroundColor Green
    }
}

# Step 3: iOS-specific cleanup
Write-Host ""
Write-Host "3. üçé iOS-specific cleanup..." -ForegroundColor Cyan

# Delete iOS build artifacts
$iosFoldersToDelete = @(
    "ios/build",
    "ios/Pods",
    "ios/.symlinks",
    "ios/Flutter/flutter_assets"
)

$iosFilesToDelete = @(
    "ios/Podfile.lock",
    "ios/Flutter/Generated.xcconfig",
    "ios/Flutter/flutter_export_environment.sh",
    "ios/Runner/GeneratedPluginRegistrant.m",
    "ios/Runner/GeneratedPluginRegistrant.h"
)

foreach ($folder in $iosFoldersToDelete) {
    if (Test-Path $folder) {
        Remove-Item $folder -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "  ‚úÖ Deleted iOS folder: $folder" -ForegroundColor Green
    }
}

foreach ($file in $iosFilesToDelete) {
    if (Test-Path $file) {
        Remove-Item $file -Force -ErrorAction SilentlyContinue
        Write-Host "  ‚úÖ Deleted iOS file: $file" -ForegroundColor Green
    }
}

# Step 4: Clear system caches (if possible)
Write-Host ""
Write-Host "4. üíæ Clearing system caches..." -ForegroundColor Cyan

# Clear DerivedData equivalent on Windows (temp folders)
$tempFolders = @(
    "$env:TEMP\flutter*",
    "$env:LOCALAPPDATA\Pub\Cache\hosted\pub.dartlang.org\google_sign_in*"
)

foreach ($tempPattern in $tempFolders) {
    try {
        $items = Get-ChildItem $tempPattern -ErrorAction SilentlyContinue
        foreach ($item in $items) {
            Remove-Item $item -Recurse -Force -ErrorAction SilentlyContinue
            Write-Host "  ‚úÖ Cleared temp: $($item.Name)" -ForegroundColor Green
        }
    }
    catch {
        # Ignore errors
    }
}

# Step 5: Regenerate all dependencies
Write-Host ""
Write-Host "5. üîÑ Regenerating dependencies..." -ForegroundColor Cyan

# Get Flutter dependencies
Write-Host "  Getting Flutter dependencies..." -ForegroundColor Gray
flutter pub get
if ($LASTEXITCODE -ne 0) {
    Write-Host "  ‚ùå Flutter pub get failed" -ForegroundColor Red
    exit 1
} else {
    Write-Host "  ‚úÖ Flutter dependencies restored" -ForegroundColor Green
}

# CocoaPods is not available on Windows, but document the steps
Write-Host ""
Write-Host "üìù NEXT STEPS for macOS/GitHub Actions:" -ForegroundColor Yellow
Write-Host "Since CocoaPods is not available on Windows, run these on macOS:" -ForegroundColor Gray
Write-Host "  cd ios" -ForegroundColor Blue
Write-Host "  pod cache clean --all" -ForegroundColor Blue  
Write-Host "  pod repo update" -ForegroundColor Blue
Write-Host "  pod install --repo-update --verbose" -ForegroundColor Blue
Write-Host ""

# Step 6: Verify clean state
Write-Host "6. ‚úÖ Verifying clean state..." -ForegroundColor Cyan

$verificationChecks = @{
    "pubspec.lock exists" = (Test-Path "pubspec.lock")
    ".dart_tool cleaned" = !(Test-Path ".dart_tool")
    "build cleaned" = !(Test-Path "build")
    "iOS Pods cleaned" = !(Test-Path "ios/Pods")
    "iOS build cleaned" = !(Test-Path "ios/build")
}

foreach ($check in $verificationChecks.GetEnumerator()) {
    if ($check.Value) {
        Write-Host "  ‚úÖ $($check.Name)" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå $($check.Name)" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "üéØ NUCLEAR CLEAN COMPLETED!" -ForegroundColor Green
Write-Host ""
Write-Host "üöÄ Ready for iOS build. On macOS, run:" -ForegroundColor Cyan
Write-Host "  flutter build ios --no-codesign --verbose" -ForegroundColor Blue
Write-Host ""
Write-Host "üìä If exit code 65 persists, the issue is likely:" -ForegroundColor Yellow
Write-Host "  - Xcode version incompatibility" -ForegroundColor Gray
Write-Host "  - iOS deployment target mismatch" -ForegroundColor Gray
Write-Host "  - Missing iOS certificates/provisioning" -ForegroundColor Gray
Write-Host "  - Firebase configuration issues" -ForegroundColor Gray
