name: Flutter iOS Build for AltStore (DISABLED)

on:
  workflow_dispatch: # –¢–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.2'
          channel: 'stable'
          cache: true

      - name: Flutter Doctor
        run: flutter doctor -v

      - name: Clean project thoroughly
        run: |
          echo "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
          flutter clean
          rm -rf build
          rm -rf ios/Pods 
          rm -rf ios/Podfile.lock
          rm -rf ios/.symlinks
          rm -rf ios/Flutter/Flutter.framework
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          
      - name: Get Flutter dependencies
        run: |
          echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Flutter –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
          flutter pub get

      - name: Analyze Flutter code
        run: |
          echo "üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞..."
          flutter analyze --no-fatal-infos || echo "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –∫–æ–¥–µ, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–±–æ—Ä–∫–∏"

      - name: Setup CocoaPods with enhanced error handling
        run: |
          echo "üçé –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CocoaPods —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫..."
          cd ios
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é CocoaPods –∏ Ruby
          echo "=== ENVIRONMENT CHECK ==="
          echo "CocoaPods –≤–µ—Ä—Å–∏—è: $(pod --version)"
          echo "Ruby –≤–µ—Ä—Å–∏—è: $(ruby --version)"
          echo "Gem –≤–µ—Ä—Å–∏—è: $(gem --version)"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º Podfile –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
          echo "=== PODFILE VALIDATION ==="
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Podfile..."
          if ruby -c Podfile > /dev/null 2>&1;
 then
            echo "‚úÖ Podfile —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
          else
            echo "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ Podfile"
            ruby -c Podfile
            exit 1
          fi
          
          # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
          echo "=== CLEANUP ==="
          rm -rf Pods Podfile.lock .symlinks
          
          # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π CocoaPods
          echo "=== REPO UPDATE ==="
          echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è CocoaPods..."
          pod repo update --silent
          
          # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º Podfile
          echo "=== PRIMARY PODFILE INSTALL ==="
          echo "–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º Podfile..."
          
          # –ó–∞–ø—É—Å–∫ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
          if pod install --repo-update --verbose --clean-install 2>&1 | tee ../pod_install.log;
 then
            echo "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π Podfile —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            PODFILE_SUCCESS=true
          else
            echo "‚ùå –û—à–∏–±–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º Podfile"
            PODFILE_SUCCESS=false
            
            # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
            echo "=== ERROR ANALYSIS ==="
            echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ pod install:"
            tail -20 ../pod_install.log
            
            echo "–ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö –æ—à–∏–±–æ–∫:"
            grep -i "error\|exception\|abort" ../pod_install.log | head -5 || echo "–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          fi
          
          # Fallback –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Podfile
          if [ "$PODFILE_SUCCESS" = "false" ]; then
            echo "=== FALLBACK TO MINIMAL PODFILE ==="
            echo "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Podfile..."
            
            # –ë—ç–∫–∞–ø –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Podfile
            cp Podfile Podfile.backup
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ Podfile
            if [ ! -f "Podfile.minimal" ]; then
              echo "‚ùå Podfile.minimal –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π..."
              cat > Podfile.minimal << 'EOF'
          platform :ios, '13.0'
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'
          source 'https://cdn.cocoapods.org/'
          
          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }
          
          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "Generated.xcconfig must exist. If you're running pod install manually, make sure flutter pub get is executed first"
            end
          
            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found in Generated.xcconfig"
          end
          
          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
          
          flutter_ios_podfile_setup
          
          target 'Runner' do
            use_frameworks!
            use_modular_headers!
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__)))
          end
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
            end
          end
          EOF
            fi
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Podfile
            cp Podfile.minimal Podfile
            
            # –û—á–∏—â–∞–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            rm -rf Pods Podfile.lock .symlinks
            
            echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º Podfile..."
            if pod install --repo-update --verbose --clean-install 2>&1 | tee ../pod_install_minimal.log;
 then
              echo "‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Podfile —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else
              echo "‚ùå –û—à–∏–±–∫–∞ –¥–∞–∂–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º Podfile"
              echo "–õ–æ–≥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
              tail -30 ../pod_install_minimal.log
              exit 1
            fi
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          echo "=== INSTALLATION VERIFICATION ==="
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö pods:"
          if [ -d "Pods" ]; then
            echo "‚úÖ –ü–∞–ø–∫–∞ Pods —Å–æ–∑–¥–∞–Ω–∞"
            echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö pods: $(ls Pods/ | wc -l)"
            ls -la Pods/ | head -10
          else
            echo "‚ùå –ü–∞–ø–∫–∞ Pods –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            exit 1
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º workspace
          if [ -f "Runner.xcworkspace/contents.xcworkspacedata" ]; then
            echo "‚úÖ Workspace —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
          else
            echo "‚ùå Workspace –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            exit 1
          fi

      - name: Check dependencies status
        run: |
          echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
          flutter pub outdated || true
          cd ios && pod outdated || true
          
      - name: Verify iOS project structure
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã iOS –ø—Ä–æ–µ–∫—Ç–∞..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:"
          ls -la ios/Runner.xcodeproj/project.pbxproj && echo "‚úÖ project.pbxproj –Ω–∞–π–¥–µ–Ω" || echo "‚ùå project.pbxproj –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
          ls -la ios/Runner/Info.plist && echo "‚úÖ Info.plist –Ω–∞–π–¥–µ–Ω" || echo "‚ùå Info.plist –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
          ls -la ios/Pods/ && echo "‚úÖ Pods —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" || echo "‚ùå Pods –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
          if [ -f "ios/Runner/GoogleService-Info.plist" ]; then
            echo "‚úÖ GoogleService-Info.plist –Ω–∞–π–¥–µ–Ω"
          else
            echo "‚ö†Ô∏è GoogleService-Info.plist –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –∫–æ—Ä–Ω—è..."
            if [ -f "google-service-info.json" ]; then
              cp google-service-info.json ios/Runner/GoogleService-Info.plist
              echo "‚úÖ GoogleService-Info.plist —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
            else
              echo "‚ùå –§–∞–π–ª Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º Flutter –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ Flutter –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
          ls -la ios/Flutter/Generated.xcconfig && echo "‚úÖ Generated.xcconfig –Ω–∞–π–¥–µ–Ω" || echo "‚ùå Generated.xcconfig –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º workspace
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ workspace:"
          ls -la ios/Runner.xcworkspace/ && echo "‚úÖ Workspace –Ω–∞–π–¥–µ–Ω" || echo "‚ùå Workspace –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

      - name: Pre-build system diagnosis
        run: |
          echo "üîç PRE-BUILD SYSTEM DIAGNOSIS"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
          echo "=== SYSTEM RESOURCES ==="
          df -h
          echo "Available disk space: $(df -h . | tail -1 | awk '{print $4}')"
          vm_stat | head -5
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
          echo "=== DEVELOPMENT TOOLS ==="
          xcode-select -p
          xcrun --show-sdk-path
          xcrun --show-sdk-version
          echo "Flutter: $(flutter --version --machine 2>/dev/null | head -1 || flutter --version | head -1)"
          echo "Dart: $(dart --version 2>&1 | head -1)"
          echo "Xcode: $(xcodebuild -version | head -1)"
          echo "CocoaPods: $(pod --version)"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
          echo "=== PROJECT VALIDATION ==="
          echo "Bundle identifier check:"
          grep -r "PRODUCT_BUNDLE_IDENTIFIER" ios/Runner.xcodeproj/ | head -3
          echo "Info.plist bundle check:"
          plutil -p ios/Runner/Info.plist | grep -i bundle || echo "No bundle info found"

      - name: Enhanced IPA build with full diagnostics
        run: |
          echo "üî® ENHANCED IPA BUILD WITH FULL DIAGNOSTICS"
          
          # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
          mkdir -p logs/{flutter,xcode,system,analysis}
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–±–æ—Ä–∫–µ
          if [ ! -d "ios/Pods" ]; then
            echo "‚ùå –û—à–∏–±–∫–∞: CocoaPods –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            exit 1
          fi
          
          # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ñ–æ–Ω–µ
          (while true; do
            echo "$(date): Disk: $(df -h . | tail -1 | awk '{print $4}'), Memory: $(vm_stat | grep 'Pages free' | awk '{print $3}')" >> logs/system/resources.log
            sleep 15
          done) &
          MONITOR_PID=$!
          
          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ unsigned —Å–±–æ—Ä–∫–∏
          echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è unsigned —Å–±–æ—Ä–∫–∏..."
          cat > ios/Flutter/Unsigned.xcconfig << 'EOF'
          #include "Generated.xcconfig"
          CODE_SIGN_IDENTITY=
          CODE_SIGNING_REQUIRED=NO
          CODE_SIGNING_ALLOWED=NO
          PROVISIONING_PROFILE_SPECIFIER=
          DEVELOPMENT_TEAM=
          ENABLE_BITCODE=NO
          SKIP_INSTALL=NO
          EOF
          
          # –ë—ç–∫–∞–ø –∏ –∑–∞–º–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          cp ios/Flutter/Release.xcconfig ios/Flutter/Release.xcconfig.backup
          cp ios/Flutter/Unsigned.xcconfig ios/Flutter/Release.xcconfig
          
          echo "üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π:"
          echo "Generated.xcconfig:"
          cat ios/Flutter/Generated.xcconfig || echo "Generated.xcconfig –Ω–µ –Ω–∞–π–¥–µ–Ω"
          echo "Release.xcconfig:"
          cat ios/Flutter/Release.xcconfig
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          echo "üìÅ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ build/":"
          ls -la build/ 2>/dev/null || echo "–ü–∞–ø–∫–∞ build –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          
          # –û–°–ù–û–í–ù–ê–Ø –°–ë–û–†–ö–ê —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          echo "üöÄ –ó–∞–ø—É—Å–∫ flutter build ipa —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π..."
          
          # –ó–∞–ø—É—Å–∫ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º stdout –∏ stderr
          flutter build ipa --release --no-codesign --verbose \
            > logs/flutter/stdout.log 2> logs/flutter/stderr.log
          
          FLUTTER_EXIT_CODE=$?
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
          kill $MONITOR_PID 2>/dev/null || true
          
          echo "Flutter build exit code: $FLUTTER_EXIT_CODE"
          
          # –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê
          echo "üîç IMMEDIATE RESULT ANALYSIS"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
          echo "=== FILE SYSTEM CHECK ==="
          echo "All files in build/":"
          find build/ -type f 2>/dev/null | sort || echo "No files in build/"
          
          echo "IPA files search:"
          find . -name "*.ipa" -type f -exec ls -lh {} \; 2>/dev/null || echo "No IPA files found anywhere"
          
          echo "Archive files search:"
          find build/ -name "*.xcarchive" -type d 2>/dev/null || echo "No xcarchive files found"
          
          echo "App bundle search:"
          find build/ -name "*.app" -type d 2>/dev/null || echo "No app bundles found"
          
          # –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –ù–ê –°–ö–†–´–¢–´–ï –û–®–ò–ë–ö–ò
          echo "üîç LOG ANALYSIS FOR HIDDEN ERRORS"
          
          echo "=== FLUTTER STDOUT ANALYSIS ==="
          if [ -f logs/flutter/stdout.log ]; then
            echo "Last 30 lines of stdout:"
            tail -30 logs/flutter/stdout.log
            
            echo "Success indicators search:"
            grep -i "built.*ipa\|archive.*success\|export.*success" logs/flutter/stdout.log || echo "‚ùå No success indicators found"
            
            echo "Warning indicators:"
            grep -i "warning\|caution" logs/flutter/stdout.log | head -5 || echo "No warnings found"
          fi
          
          echo "=== FLUTTER STDERR ANALYSIS ==="
          if [ -f logs/flutter/stderr.log ]; then
            echo "Stderr content:"
            cat logs/flutter/stderr.log
            
            echo "Hidden error search:"
            grep -i "error\|fail\|exception\|abort\|denied" logs/flutter/stderr.log || echo "No explicit errors in stderr"
          fi
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–±–æ—Ä–∫–∏
          IPA_FOUND=false
          if [ -f "build/ios/ipa/Runner.ipa" ] || [ -f "build/ios/ipa/taste_smoke_ios.ipa" ] || ls build/ios/ipa/*.ipa 1> /dev/null 2>&1;
 then
            echo "‚úÖ IPA —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ build/ios/ipa/"
            IPA_FOUND=true
          fi
          
          # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ú–ï–¢–û–î–´ –°–ë–û–†–ö–ò
          if [ "$IPA_FOUND" = "false" ]; then
            echo "üîÑ IPA –ù–ï –ù–ê–ô–î–ï–ù - –ü–†–û–ë–£–ï–ú –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ú–ï–¢–û–î–´"
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            cp ios/Flutter/Release.xcconfig.backup ios/Flutter/Release.xcconfig
            
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π xcodebuild
            echo "=== METHOD 1: Direct xcodebuild ==="
            cd ios
            
            echo "Cleaning with xcodebuild..."
            xcodebuild clean -workspace Runner.xcworkspace -scheme Runner -configuration Release \
              > ../logs/xcode/clean.log 2>&1
            
            echo "Building archive with xcodebuild..."
            xcodebuild archive \
              -workspace Runner.xcworkspace \
              -scheme Runner \
              -configuration Release \
              -archivePath build/Runner.xcarchive \
              CODE_SIGN_IDENTITY=""
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO \
              ENABLE_BITCODE=NO \
              > ../logs/xcode/archive.log 2>&1
            
            ARCHIVE_EXIT_CODE=$?
            echo "Archive exit code: $ARCHIVE_EXIT_CODE"
            
            if [ $ARCHIVE_EXIT_CODE -eq 0 ] && [ -d "build/Runner.xcarchive" ]; then
              echo "‚úÖ Archive created successfully"
              
              # –°–æ–∑–¥–∞–µ–º export options
              cat > export_options.plist << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>development</string>
    <key>signingStyle</key>
    <string>manual</string>
    <key>stripSwiftSymbols</key>
    <false/>
</dict>
</plist>
EOF
              
              echo "Exporting to IPA..."
              xcodebuild -exportArchive \
                -archivePath build/Runner.xcarchive \
                -exportPath ../build/ios/ipa \
                -exportOptionsPlist export_options.plist \
                > ../logs/xcode/export.log 2>&1
              
              EXPORT_EXIT_CODE=$?
              echo "Export exit code: $EXPORT_EXIT_CODE"
              
              if [ $EXPORT_EXIT_CODE -eq 0 ]; then
                echo "‚úÖ Direct xcodebuild method succeeded"
                IPA_FOUND=true
              fi
            else
              echo "‚ùå Archive creation failed"
              echo "Archive log (last 20 lines):"
              tail -20 ../logs/xcode/archive.log
            fi
            
            cd ..
            
            # –ú–µ—Ç–æ–¥ 2: Flutter build ios + manual IPA
            if [ "$IPA_FOUND" = "false" ]; then
              echo "=== METHOD 2: Flutter build ios + manual IPA ==="
              
              flutter build ios --release --no-codesign --verbose \
                > logs/flutter/build_ios_stdout.log 2> logs/flutter/build_ios_stderr.log
              
              IOS_BUILD_EXIT_CODE=$?
              echo "Flutter build ios exit code: $IOS_BUILD_EXIT_CODE"
              
              if [ $IOS_BUILD_EXIT_CODE -eq 0 ] && [ -d "build/ios/iphoneos" ]; then
                echo "‚úÖ iOS build successful, creating IPA manually..."
                
                cd build/ios/iphoneos
                APP_NAME=$(find . -name "*.app" -type d | head -1)
                
                if [ -n "$APP_NAME" ]; then
                  echo "Found app: $APP_NAME"
                  echo "App bundle size: $(du -sh "$APP_NAME" | cut -f1)"
                  
                  # –°–æ–∑–¥–∞–µ–º IPA —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                  mkdir -p ../ipa/Payload
                  cp -r "$APP_NAME" ../ipa/Payload/
                  
                  cd ../ipa
                  zip -r "taste_smoke_ios.ipa" Payload/ > /dev/null
                  
                  if [ -f "taste_smoke_ios.ipa" ]; then
                    echo "‚úÖ Manual IPA created: $(ls -lh taste_smoke_ios.ipa)"
                    IPA_FOUND=true
                  fi
                  
                  cd ../../..
                else
                  echo "‚ùå No .app bundle found in build/ios/iphoneos"
                  ls -la build/ios/iphoneos/
                  cd ../../..
                fi
              else
                echo "‚ùå Flutter build ios failed"
                echo "iOS build stderr:"
                cat logs/flutter/build_ios_stderr.log
              fi
            fi
          fi
          
          # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –í–ê–õ–ò–î–ê–¶–ò–Ø
          echo "üéØ FINAL VALIDATION"
          
          if [ "$IPA_FOUND" = "true" ] && [ -d "build/ios/ipa" ] && ls build/ios/ipa/*.ipa 1> /dev/null 2>&1;
 then
            echo "‚úÖ IPA –§–ê–ô–õ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!"
            
            for ipa in build/ios/ipa/*.ipa;
 do
              echo "üì± IPA: $ipa"
              echo "   –†–∞–∑–º–µ—Ä: $(du -h "$ipa" | cut -f1)"
              echo "   –¢–∏–ø —Ñ–∞–π–ª–∞: $(file "$ipa")"
              
              # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ IPA
              echo "   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤):"
              unzip -l "$ipa" | head -15 | tail -10
              
              # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
              if unzip -l "$ipa" | grep -q "Payload/.*\.app/"; then
                echo "   ‚úÖ IPA —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
              else
                echo "   ‚ö†Ô∏è IPA –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º"
              fi
            done
          else
            echo "‚ùå IPA –§–ê–ô–õ –ù–ï –ë–´–õ –°–û–ó–î–ê–ù –ù–ò–ö–ê–ö–ò–ú –ú–ï–¢–û–î–û–ú"
            echo ""
            echo "=== FINAL DIAGNOSTICS ==="
            echo "Build directory structure:"
            find build/ -type f 2>/dev/null | head -30
            echo ""
            echo "System resources at end:"
            df -h . | tail -1
            echo ""
            echo "Check logs in artifacts for detailed analysis"
            exit 1
          fi
          
      - name: Verify IPA creation and validate
        run: |
          echo "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è IPA..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          echo "=== –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ build/ ==="
          find build/ -type f 2>/dev/null | sort || echo "–ü–∞–ø–∫–∞ build –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          
          echo ""
          echo "=== –ü–æ–∏—Å–∫ –≤—Å–µ—Ö IPA —Ñ–∞–π–ª–æ–≤ ==="
          find . -name "*.ipa" -type f 2>/dev/null || echo "IPA —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏–≥–¥–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ"
          
          echo ""
          echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ build/ios/ipa ==="
          if [ -d "build/ios/ipa" ]; then
            echo "‚úÖ –ü–∞–ø–∫–∞ build/ios/ipa —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            ls -la build/ios/ipa/
            
            if ls build/ios/ipa/*.ipa 1> /dev/null 2>&1;
 then
              echo ""
              echo "‚úÖ IPA —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã! –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:"
              
              for ipa in build/ios/ipa/*.ipa;
 do
                echo ""
                echo "üì± –ê–Ω–∞–ª–∏–∑ IPA: $ipa"
                echo "   üìè –†–∞–∑–º–µ—Ä: $(du -h "$ipa" | cut -f1)"
                echo "   üîç –¢–∏–ø —Ñ–∞–π–ª–∞: $(file "$ipa")"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ZIP –∞—Ä—Ö–∏–≤
                if file "$ipa" | grep -q "Zip archive"; then
                  echo "   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤"
                  
                  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ IPA
                  echo "   üì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ IPA (–ø–µ—Ä–≤—ã–µ 15 —Ñ–∞–π–ª–æ–≤):"
                  unzip -l "$ipa" | head -20 | tail -15
                  
                  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                  echo "   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:"
                  
                  if unzip -l "$ipa" | grep -q "Payload/.*\.app/"; then
                    echo "   ‚úÖ App bundle –Ω–∞–π–¥–µ–Ω –≤ Payload/"
                  else
                    echo "   ‚ùå App bundle –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Payload/"
                  fi
                  
                  if unzip -l "$ipa" | grep -q "Payload/.*\.app/Info.plist"; then
                    echo "   ‚úÖ Info.plist –Ω–∞–π–¥–µ–Ω"
                  else
                    echo "   ‚ùå Info.plist –Ω–µ –Ω–∞–π–¥–µ–Ω"
                  fi
                  
                  if unzip -l "$ipa" | grep -q "Payload/.*\.app/.*"; then
                    APP_BUNDLE=$(unzip -l "$ipa" | grep "Payload/.*\.app/" | head -1 | awk '{print $4}' | cut -d'/' -f2)
                    echo "   üì± –ò–º—è app bundle: $APP_BUNDLE"
                  fi
                  
                  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1MB –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                  SIZE_BYTES=$(stat -f%z "$ipa" 2>/dev/null || stat -c%s "$ipa" 2>/dev/null || echo "0")
                  SIZE_MB=$((SIZE_BYTES / 1024 / 1024))
                  
                  if [ "$SIZE_MB" -gt 1 ]; then
                    echo "   ‚úÖ –†–∞–∑–º–µ—Ä IPA –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: ${SIZE_MB}MB"
                  else
                    echo "   ‚ö†Ô∏è IPA —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: ${SIZE_MB}MB (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–ø–æ–ª–Ω—ã–π)"
                  fi
                  
                else
                  echo "   ‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ZIP –∞—Ä—Ö–∏–≤–æ–º"
                  echo "   üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç):"
                  hexdump -C "$ipa" | head -5
                fi
              done
              
              echo ""
              echo "üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
              
            else
              echo "‚ùå IPA —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ build/ios/ipa"
              echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:"
              ls -la build/ios/ipa/ || echo "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏"
              exit 1
            fi
          else
            echo "‚ùå –ü–∞–ø–∫–∞ build/ios/ipa –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            echo ""
            echo "=== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è IPA ==="
            echo "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
            echo "1. flutter build ipa –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ"
            echo "2. –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∏ –∫–æ–¥–∞"
            echo "3. –û—à–∏–±–∫–∏ –≤ Info.plist –∏–ª–∏ bundle identifier"
            echo "4. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"
            echo ""
            echo "–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ build/":"
            find build/ -type f 2>/dev/null | head -30 || echo "–ü–∞–ø–∫–∞ build –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            exit 1
          fi

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: taste-smoke-ios-altstore
          path: build/ios/ipa/*.ipa
          retention-days: 30

      - name: Debug build failure
        if: failure()
        run: |
          echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏..."
          
          echo "=== –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ ==="
          ls -la ios/
          
          echo "=== –°—Ç—Ä—É–∫—Ç—É—Ä–∞ build ==="
          find build/ -type f 2>/dev/null || echo "–ü–∞–ø–∫–∞ build –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          
          echo "=== Xcode –ø—Ä–æ–µ–∫—Ç ==="
          ls -la ios/Runner.xcodeproj/
          ls -la ios/Runner.xcworkspace/ 2>/dev/null || echo "Workspace –Ω–µ –Ω–∞–π–¥–µ–Ω"
          
          echo "=== CocoaPods ==="
          ls -la ios/Pods/ 2>/dev/null || echo "Pods –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          cat ios/Podfile.lock | head -20 2>/dev/null || echo "Podfile.lock –Ω–µ –Ω–∞–π–¥–µ–Ω"
          
          echo "=== Flutter –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==="
          ls -la ios/Flutter/
          cat ios/Flutter/Generated.xcconfig 2>/dev/null || echo "Generated.xcconfig –Ω–µ –Ω–∞–π–¥–µ–Ω"
          
          echo "=== –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏ ==="
          find . -name "*.log" -mtime -1 2>/dev/null | head -5 | xargs tail -50 2>/dev/null || echo "–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

      - name: Upload Flutter build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build-logs
          path: |
            flutter_logs/
          retention-days: 7

      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-debug
          path: |
            ios/Pods/
            build/
            ios/Flutter/
            ios/Runner.xcodeproj/
            ios/Podfile*
            flutter_logs/
          retention-days: 7